%YAML 1.2
---
# Based on https://tools.ietf.org/html/rfc6020
name: Yang
file_extensions:
  - yang
scope: source.yang
variables:
  ident: '[a-zA-Z_][a-zA-Z0-9_\.\-]*'
  b_l: '(?<![-:\w])'
  b_r: '(?![-:\w])'
  non_zero_digit: '(1|2|3|4|5|6|7|8|9)'
  pos_int: '{{non_zero_digit}}[\d]*'
  non_neg_int: '(0|{{pos_int}})'
  int: ([\-]?{{non_neg_int}})
  desc_schema_nodeid: '{{ident}}(\/{{ident}})*'
  abs_path: '(\/{{ident}})+'
  rel_path: '(\.\.\/)+{{ident}}{{abs_path}}'
  int_types: '(int8|int16|int32|int64|uint8|uint16|uint32|uint64)'
  yang_types: '({{int_types}}|decimal64|string|boolean|enumeration|bits|binary|leafref|identityref|empty|union|instance-identifier)'

  yang_lang_const: '(true|false|current|deprecated|obsolete|not-supported|add|replace|delete|unbounded|system|user|min|max)'
  unq_string: '[^\s;{}(\/\/)(\/\*)(\*\/)]+'
contexts:
  prototype:
    - include: comments
    - include: stmt_end

  main:
    - include: statements

  comments:
    # Line comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.yang
      push: line_comment

    # Block comments begin with a '/*' and finish with a '*/'
    - match: '/\*'
      scope: punctuation.definition.comment.yang
      push: block_comment

  statements:
    - match: '{{b_l}}(module){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.module.yang
          set: stmt_end
    - match: '{{b_l}}(submodule){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.submodule.yang
          set: stmt_end
    - match: '{{b_l}}(typedef){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.type.yang
          set: stmt_end
    - match: '{{b_l}}(container){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.container.yang
          set: stmt_end
    - match: '{{b_l}}(leaf){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.leaf.yang
          set: stmt_end
    - match: '{{b_l}}(leaf-list){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.leaf-list.yang
          set: stmt_end
    - match: '{{b_l}}(list){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.list.yang
          set: stmt_end
    - match: '{{b_l}}(grouping){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: entity.name.grouping.yang
          set: stmt_end
    - match: '{{b_l}}(choice){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(anyxml){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(uses){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{ident}}){{b_r}}'
          captures:
            1: variable.parameter.yang
          set: stmt_end
    - match: '{{b_l}}(rpc){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(notification){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(augment){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(identity){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(extension){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(type){{b_r}}'
      scope: keyword.operator.type.yang
      set:
        - match: '{{b_l}}(({{ident}})(:)({{ident}}))|({{yang_types}}){{b_r}}'
          captures:
            2: entity.name.namespace.yang
            3: punctuation.accessor.colon.yang
            4: storage.type.custom.yang
            5: storage.type.yang
          set: stmt_end
    - match: '{{b_l}}(yang-version){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(namespace){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\".*\"){{b_r}}'
          captures:
            1: entity.name.namespace.yang
          set: stmt_end
    - match: '{{b_l}}(prefix){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"{{ident}}\"){{b_r}}'
          captures:
            1: string.yang
          set: stmt_end
    - match: '{{b_l}}(import){{b_r}}'
      scope: keyword.control.import.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(revision-date){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(include){{b_r}}'
      scope: keyword.control.import.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(organization){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(contact)'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(revision){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(description){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(belongs-to){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(units){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(default){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '"'
          push: double_quoted_string
        - match: '{{b_l}}({{int}}){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
        - match: '{{b_l}}(true|false){{b_r}}'
          captures:
            1: constant.language.boolean.yang
          set: stmt_end
        - match: '{{b_l}}({{ident}}){{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(must){{b_r}}'
      scope: keyword.other.yang
      set: stmt_must
    - match: '{{b_l}}(error-message){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(error-app-tag){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(presence){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(mandatory){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_const_bool
    - match: '{{b_l}}(min-elements){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{non_neg_int}}){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
    - match: '{{b_l}}(max-elements){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{pos_int}}){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
        - match: '{{b_l}}(unbounded){{b_r}}'
          captures:
            1: constant.language.yang
          set: stmt_end
        - match: '{{b_l}}(\"(unbounded)\"){{b_r}}'
          captures:
            2: constant.language.yang
          set: stmt_end
    - match: '{{b_l}}(ordered-by){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(system|user){{b_r}}'
          captures:
            1: constant.language.yang
          set: stmt_end
    - match: '{{b_l}}(key){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"{{ident}}(\s+{{ident}})*\"){{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(unique){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"({{desc_schema_nodeid}})(\s+({{desc_schema_nodeid}}))*\"){{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(case){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(refine){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"{{ident}}\"){{b_r}}'
          set: stmt_end
    # input statement does not take an argument
    - match: '{{b_l}}(input){{b_r}}'
      scope: keyword.other.yang
    # output statement does not take an argument
    - match: '{{b_l}}(output){{b_r}}'
      scope: keyword.other.yang
    - match: '{{b_l}}(base){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}"(({{ident}})(:))?({{ident}})"{{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(argument){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier_string
    - match: '{{b_l}}(yin-element){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_const_bool
    - match: '{{b_l}}(feature){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(if-feature){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(deviation){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"{{ident}}\"){{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(deviate){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(not-supported|add|replace|delete){{b_r}}'
          captures:
            1: constant.language.yang
          set: stmt_end
    - match: '{{b_l}}(config){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_const_bool
    - match: '{{b_l}}(status){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(current|deprecated|obsolete){{b_r}}'
          captures:
            1: constant.language.yang
          set: stmt_end
    - match: '{{b_l}}(reference){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_string
    - match: '{{b_l}}(when){{b_r}}'
      scope: keyword.other.yang
      set: stmt_when
    - match: '{{b_l}}(range){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_range
    - match: '{{b_l}}(fraction-digits){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(1[0-8]?|2|3|4|5|6|7|8|9){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
    - match: '{{b_l}}(length){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_range
    - match: '{{b_l}}(pattern){{b_r}}'
      scope: keyword.other.yang
      set: stmt_pattern
    - match: '{{b_l}}(enum){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}\"{{ident}}\"{{b_r}}'
          set: stmt_end
        - match: '{{b_l}}{{ident}}{{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(value){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{int}}){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
    - match: '{{b_l}}(bit){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_identifier
    - match: '{{b_l}}(position){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}({{non_neg_int}}){{b_r}}'
          captures:
            1: constant.numeric.integer.yang
          set: stmt_end
    - match: '{{b_l}}(path){{b_r}}'
      scope: keyword.other.yang
      set:
        - match: '{{b_l}}(\"(({{abs_path}})|({{rel_path}}))\"){{b_r}}'
          set: stmt_end
    - match: '{{b_l}}(require-instance){{b_r}}'
      scope: keyword.other.yang
      set: stmt_arg_const_bool
    - match: '{{b_l}}({{ident}})(:)({{ident}}){{b_r}}'
      scope: meta.path.yang
      captures:
        1: entity.name.namespace.yang
        2: punctuation.accessor.colon.yang
        3: keyword.other.yang
      set: stmt_arg_custom

  stmt_must: # seperate syntax
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_when: # seperate syntax
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_pattern: # seperate syntax
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end




  stmt_arg_custom:
    - include: stmt_arg_string

  stmt_arg_range:
    - match: '{{b_l}}((\d+)|(min|max))((\.\.)((\d+)|(min|max)))?{{b_r}}'
      captures:
        2: constant.numeric.integer.yang
        3: constant.language.yang
        5: keyword.operator.yang
        7: constant.numeric.integer.yang
        8: constant.language.yang
    - match: '\|'
      scope: keyword.operator.logical.yang

  stmt_arg_const_bool:
    - match: '{{b_l}}(true|false){{b_r}}'
      captures:
        1: constant.language.boolean.yang
      set: stmt_end

  stmt_arg_identifier:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      set: stmt_end

  stmt_arg_identifier_string:
    - match: '{{b_l}}"({{ident}})"{{b_r}}'
      set: stmt_end

  stmt_arg_string:
    - match: '"'
      push: double_quoted_string

  stmt_end:
    - match: ';'
      scope: punctuation.terminator.yang
      pop: true
    - match: '{'
      scope: punctuation.section.block.begin.yang
      pop: true
    - match: '}'
      scope: punctuation.section.block.begin.yang

  constants:
    # Integer constants
    - match: '(?<![\w\-\+])([\+\-])?0x\d+\b'
      scope: constant.numeric.integer.hexadecimal.yang
    - match: '(?<![\w\-\+])([\+\-])?0\d+\b'
      scope: constant.numeric.integer.octal.yang
    - match: '(?<![\w\-\+])([\+\-])?\d+\b'
      scope: constant.numeric.integer.decimal.yang
      # We put the decimal last in order to support a single '0'

    # Decimal64 constant
    - match: '(?<![\w\-\+])([\+\-])?\d+\.\d+\b'
      scope: constant.numeric.real.decimal64.yang

    # Double quoted strings begin with '"' and finish with '"'.
    - match: '"'
      scope: punctuation.definition.string.begin.yang
      push: double_quoted_string

    # Single quoted strings begin with ' and finish with '.
    - match: "'"
      scope: punctuation.definition.string.begin.yang
      push: single_quoted_string

    # Boolean constant
    - match: '{{b_l}}(true|false){{b_r}}'
      scope: constant.language.boolean.yang

    # Language constants
    - match: '{{b_l}}{{yang_lang_const}}{{b_r}}'
      scope: constant.language.yang

    # Unquoted strings have not bounding characters, but spaces, tabs, semicolon,
    # curly braces or comment sequences are not allowed. As this matches pretty
    # much anything, this should probably always be the last rule.
    # - match: 'unq_string'
    #   scope: string.unquoted.yang

  line_comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.yang
    - match: $
      pop: true

  block_comment:
    - meta_include_prototype: false
    - meta_scope: comment.block.yang
    - match: '\*/'
      scope: punctuation.definition.comment.yang
      pop: true

  double_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.yang
    # Special characters can be introduced using '\'
    - match: '\\[n|t|"|\\]'
      scope: constant.character.escape.yang
    - match: '"'
      scope: punctuation.definition.string.end.yang
      pop: true

  single_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.yang
    # No special characters are allowed
    - match: "'"
      scope: punctuation.definition.string.end.yang
      pop: true
