%YAML 1.2
---
# Based on https://tools.ietf.org/html/rfc6020
name: Yang
file_extensions:
  - yang
scope: source.yang
variables:
  ident: '[a-zA-Z_][a-zA-Z0-9_\.\-]*'
  b_l: '(?<![-\w])'
  b_r: '(?![-\w])'
  int_types: '(int8|int16|int32|int64|uint8|uint16|uint32|uint64)'
  yang_types: '({{int_types}}|decimal64|string|boolean|enumeration|bits|binary|leafref|identityref|empty|union|instance-identifier)'

  yang_lang_const: '(true|false|current|deprecated|obsolete|not-supported|add|replace|delete|unbounded|system|user|min|max)'
  #custom_keyword: '({{ident}}:{{ident}})'
  unq_string: '[^\s;{}(\/\/)(\/\*)(\*\/)]+'
contexts:
  prototype:
    - include: comments
    - include: stmt_end

  main:
    - include: statements

  comments:
    # Line comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.yang
      push: line_comment

    # Block comments begin with a '/*' and finish with a '*/'
    - match: '/\*'
      scope: punctuation.definition.comment.yang
      push: block_comment

  statements:
    - match: '{{b_l}}(module){{b_r}}'
      scope: keyword.other.yang
      set: stmt_module
    - match: '{{b_l}}(submodule){{b_r}}'
      scope: keyword.other.yang
      set: stmt_submodule
    - match: '{{b_l}}(typedef){{b_r}}'
      scope: keyword.other.yang
      set: stmt_typedef
    - match: '{{b_l}}(container){{b_r}}'
      scope: keyword.other.yang
      set: stmt_container
    - match: '{{b_l}}(leaf){{b_r}}'
      scope: keyword.other.yang
      set: stmt_leaf
    - match: '{{b_l}}(leaf-list){{b_r}}'
      scope: keyword.other.yang
      set: stmt_leaf-list
    - match: '{{b_l}}(list){{b_r}}'
      scope: keyword.other.yang
      set: stmt_list
    - match: '{{b_l}}(grouping){{b_r}}'
      scope: keyword.other.yang
      set: stmt_grouping
    - match: '{{b_l}}(choice){{b_r}}'
      scope: keyword.other.yang
      set: stmt_choice
    - match: '{{b_l}}(anyxml){{b_r}}'
      scope: keyword.other.yang
      set: stmt_anyxml
    - match: '{{b_l}}(uses){{b_r}}'
      scope: keyword.other.yang
      set: stmt_uses
    - match: '{{b_l}}(rpc){{b_r}}'
      scope: keyword.other.yang
      set: stmt_rpc
    - match: '{{b_l}}(notification){{b_r}}'
      scope: keyword.other.yang
      set: stmt_notification
    - match: '{{b_l}}(augment){{b_r}}'
      scope: keyword.other.yang
      set: stmt_augment
    - match: '{{b_l}}(identity){{b_r}}'
      scope: keyword.other.yang
      set: stmt_identity
    - match: '{{b_l}}(extension){{b_r}}'
      scope: keyword.other.yang
      set: stmt_extension
    - match: '{{b_l}}(type){{b_r}}'
      scope: keyword.operator.type.yang
      set: stmt_type
    - match: '{{b_l}}(yang-version){{b_r}}'
      scope: keyword.other.yang
      set: stmt_yang-version
    - match: '{{b_l}}(namespace){{b_r}}'
      scope: keyword.other.yang
      set: stmt_namespace
    - match: '{{b_l}}(prefix){{b_r}}'
      scope: keyword.other.yang
      set: stmt_prefix
    - match: '{{b_l}}(import){{b_r}}'
      scope: keyword.control.import.yang
      set: stmt_import
    - match: '{{b_l}}(revision-date){{b_r}}'
      scope: keyword.other.yang
      set: stmt_revision-date
    - match: '{{b_l}}(include){{b_r}}'
      scope: keyword.other.yang
      set: stmt_include
    - match: '{{b_l}}(organization){{b_r}}'
      scope: keyword.other.yang
      set: stmt_organization
    - match: '{{b_l}}(contact)'
      scope: keyword.other.yang
      set: stmt_contact
    - match: '{{b_l}}(revision){{b_r}}'
      scope: keyword.other.yang
      set: stmt_revision
    - match: '{{b_l}}(description){{b_r}}'
      scope: keyword.other.yang
      set: stmt_description
    - match: '{{b_l}}(belongs-to){{b_r}}'
      scope: keyword.other.yang
      set: stmt_belongs-to
    - match: '{{b_l}}(units){{b_r}}'
      scope: keyword.other.yang
      set: stmt_units
    - match: '{{b_l}}(default){{b_r}}'
      scope: keyword.other.yang
      set: stmt_default
    - match: '{{b_l}}(must){{b_r}}'
      scope: keyword.other.yang
      set: stmt_must
    - match: '{{b_l}}(error-message){{b_r}}'
      scope: keyword.other.yang
      set: stmt_error-message
    - match: '{{b_l}}(error-app-tag){{b_r}}'
      scope: keyword.other.yang
      set: stmt_error-app-tag
    - match: '{{b_l}}(presence){{b_r}}'
      scope: keyword.other.yang
      set: stmt_presence
    - match: '{{b_l}}(mandatory){{b_r}}'
      scope: keyword.other.yang
      set: stmt_mandatory
    - match: '{{b_l}}(min-elements){{b_r}}'
      scope: keyword.other.yang
      set: stmt_min-elements
    - match: '{{b_l}}(max-elements){{b_r}}'
      scope: keyword.other.yang
      set: stmt_max-elements
    - match: '{{b_l}}(ordered-by){{b_r}}'
      scope: keyword.other.yang
      set: stmt_ordered-by
    - match: '{{b_l}}(key){{b_r}}'
      scope: keyword.other.yang
      set: stmt_key
    - match: '{{b_l}}(unique){{b_r}}'
      scope: keyword.other.yang
      set: stmt_unique
    - match: '{{b_l}}(case){{b_r}}'
      scope: keyword.other.yang
      set: stmt_case
    - match: '{{b_l}}(refine){{b_r}}'
      scope: keyword.other.yang
      set: stmt_refine
    - match: '{{b_l}}(input){{b_r}}'
      scope: keyword.other.yang
      set: stmt_input
    - match: '{{b_l}}(output){{b_r}}'
      scope: keyword.other.yang
      set: stmt_output
    - match: '{{b_l}}(base){{b_r}}'
      scope: keyword.other.yang
      set: stmt_base
    - match: '{{b_l}}(argument){{b_r}}'
      scope: keyword.other.yang
      set: stmt_argument
    - match: '{{b_l}}(yin-element){{b_r}}'
      scope: keyword.other.yang
      set: stmt_yin-element
    - match: '{{b_l}}(feature){{b_r}}'
      scope: keyword.other.yang
      set: stmt_feature
    - match: '{{b_l}}(if-feature){{b_r}}'
      scope: keyword.other.yang
      set: stmt_if-feature
    - match: '{{b_l}}(deviation){{b_r}}'
      scope: keyword.other.yang
      set: stmt_deviation
    - match: '{{b_l}}(deviate){{b_r}}'
      scope: keyword.other.yang
      set: stmt_deviate
    - match: '{{b_l}}(config){{b_r}}'
      scope: keyword.other.yang
      set: stmt_config
    - match: '{{b_l}}(status){{b_r}}'
      scope: keyword.other.yang
      set: stmt_status
    - match: '{{b_l}}(reference){{b_r}}'
      scope: keyword.other.yang
      set: stmt_reference
    - match: '{{b_l}}(when){{b_r}}'
      scope: keyword.other.yang
      set: stmt_when
    - match: '{{b_l}}(range){{b_r}}'
      scope: keyword.other.yang
      set: stmt_range
    - match: '{{b_l}}(fraction-digits){{b_r}}'
      scope: keyword.other.yang
      set: stmt_fraction-digits
    - match: '{{b_l}}(length){{b_r}}'
      scope: keyword.other.yang
      set: stmt_length
    - match: '{{b_l}}(pattern){{b_r}}'
      scope: keyword.other.yang
      set: stmt_pattern
    - match: '{{b_l}}(enum){{b_r}}'
      scope: keyword.other.yang
      set: stmt_enum
    - match: '{{b_l}}(value){{b_r}}'
      scope: keyword.other.yang
      set: stmt_value
    - match: '{{b_l}}(bit){{b_r}}'
      scope: keyword.other.yang
      set: stmt_bit
    - match: '{{b_l}}(position){{b_r}}'
      scope: keyword.other.yang
      set: stmt_position
    - match: '{{b_l}}(path){{b_r}}'
      scope: keyword.other.yang
      set: stmt_path
    - match: '{{b_l}}(require-instance){{b_r}}'
      scope: keyword.other.yang
      set: stmt_require-instance

  stmt_module:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.module.yang
      set: stmt_end

  stmt_submodule:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.submodule.yang
      set: stmt_end

  stmt_typedef:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.type.yang
      set: stmt_end

  stmt_container:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.container.yang
      set: stmt_end

  stmt_leaf:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.leaf.yang
      set: stmt_end

  stmt_leaf-list:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.leaf-list.yang
      set: stmt_end

  stmt_list:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.list.yang
      set: stmt_end

  stmt_grouping:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: entity.name.grouping.yang
      set: stmt_end

  stmt_choice:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_anyxml:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_uses:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_rpc:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_notification:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_augment:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_identity:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_extension:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: variable.parameter.yang
      set: stmt_end

  stmt_type:
    - match: '{{b_l}}({{yang_types}}){{b_r}}'
      captures:
        1: storage.type.yang
      set: stmt_end

  stmt_yang-version:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_namespace:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: entity.name.namespace
      set: stmt_end

  stmt_prefix:
    - match: '{{b_l}}(\"{{ident}}\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_import:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_revision-date:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_include:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_organization:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_contact:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_revision:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_description:
    - match: '{{b_l}}(\"[.\n]*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_belongs-to:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_units:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_default:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_must:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_error-message:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_error-app-tag:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_presence:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_mandatory:
    - match: '{{b_l}}(true|false){{b_r}}'
      captures:
        1: constant.language.boolean.yang
      set: stmt_end

  stmt_min-elements:
    - match: '{{b_l}}(\d+){{b_r}}'
      captures:
        1: constant.numeric.integer.yang
      set: stmt_end

  stmt_max-elements:
    - match: '{{b_l}}(\d+|\"unbounded\"){{b_r}}'
      captures:
        1: constant.numeric.integer.yang
      set: stmt_end

  stmt_ordered-by:
    - match: '{{b_l}}(system|user){{b_r}}'
      captures:
        1: constant.language.yang
      set: stmt_end

  stmt_key:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_unique:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_case:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_refine:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_input:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_output:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_base:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_argument:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_yin-element:
    - match: '{{b_l}}(true|false){{b_r}}'
      captures:
        1: constant.language.boolean.yang
      set: stmt_end

  stmt_feature:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_if-feature:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_deviation:
    - match: '{{b_l}}(\".*\"){'
      captures:
        1: string.yang
      set: stmt_end

  stmt_deviate:
    - match: '{{b_l}}(not-supported|add|replace|delete){{b_r}}'
      captures:
        1: constant.language.yang
      set: stmt_end

  stmt_config:
    - match: '{{b_l}}(true|false){{b_r}}'
      captures:
        1: constant.language.boolean.yang
      set: stmt_end

  stmt_status:
    - match: '{{b_l}}(current|deprecated|obsolete){{b_r}}'
      captures:
        1: constant.language.yang
      set: stmt_end

  stmt_reference:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_when:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_range:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_fraction-digits:
    - match: '{{b_l}}(\d+)'
      captures:
        1: constant.numeric.integer.yang
      set: stmt_end

  stmt_length:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_pattern:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_enum:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_value:
    - match: '{{b_l}}(\d+){{b_r}}'
      captures:
        1: constant.numeric.integer.yang
      set: stmt_end

  stmt_bit:
    - match: '{{b_l}}({{ident}}){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_position:
    - match: '{{b_l}}(\d+){{b_r}}'
      captures:
        1: constant.numeric.integer.yang
      set: stmt_end

  stmt_path:
    - match: '{{b_l}}(\".*\"){{b_r}}'
      captures:
        1: string.yang
      set: stmt_end

  stmt_require-instance:
    - match: '{{b_l}}(true|false){{b_r}}'
      captures:
        1: constant.language.boolean.yang
      set: stmt_end

  stmt_end:
    - match: ';'
      scope: punctuation.terminator.yang
      pop: true
    - match: '{'
      scope: punctuation.terminator.yang
      pop: true

  constants:
    # Integer constants
    - match: '(?<![\w\-\+])([\+\-])?0x\d+\b'
      scope: constant.numeric.integer.hexadecimal.yang
    - match: '(?<![\w\-\+])([\+\-])?0\d+\b'
      scope: constant.numeric.integer.octal.yang
    - match: '(?<![\w\-\+])([\+\-])?\d+\b'
      scope: constant.numeric.integer.decimal.yang
      # We put the decimal last in order to support a single '0'

    # Decimal64 constant
    - match: '(?<![\w\-\+])([\+\-])?\d+\.\d+\b'
      scope: constant.numeric.real.decimal64.yang

    # Double quoted strings begin with '"' and finish with '"'.
    - match: '"'
      scope: punctuation.definition.string.begin.yang
      push: double_quoted_string

    # Single quoted strings begin with ' and finish with '.
    - match: "'"
      scope: punctuation.definition.string.begin.yang
      push: single_quoted_string

    # Boolean constant
    - match: '{{b_l}}(true|false){{b_r}}'
      scope: constant.language.boolean.yang

    # Language constants
    - match: '{{b_l}}{{yang_lang_const}}{{b_r}}'
      scope: constant.language.yang

    # Unquoted strings have not bounding characters, but spaces, tabs, semicolon,
    # curly braces or comment sequences are not allowed. As this matches pretty
    # much anything, this should probably always be the last rule.
    # - match: 'unq_string'
    #   scope: string.unquoted.yang

  line_comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.yang
    - match: $
      pop: true

  block_comment:
    - meta_include_prototype: false
    - meta_scope: comment.block.yang
    - match: '\*/'
      scope: punctuation.definition.comment.yang
      pop: true

  double_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.yang
    # Special characters can be introduced using '\'
    - match: '\\[n|t|"|\\]'
      scope: constant.character.escape.yang
    - match: '"'
      scope: punctuation.definition.string.end.yang
      pop: true

  single_quoted_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.yang
    # No special characters are allowed
    - match: "'"
      scope: punctuation.definition.string.end.yang
      pop: true
